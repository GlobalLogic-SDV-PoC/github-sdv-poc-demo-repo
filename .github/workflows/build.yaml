name: Build
on:
  workflow_call:
    inputs:
      Version:
        description: 'Package version'
        required: true
        default: 1.0.0
        type: number
      ReleaseNum:
        description: 'Release Num'
        required: true
        default: 1
        type: number
      Architecture:
        description: 'Architecture'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - arm64
        - amd64



jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

# FIX
      - name: Download files
        run: |
          mkdir -p ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}/opt/
          find . -name "./hitachiastemo-tools/.git" -o -name "./hitachiastemo-tools/.git*" | xargs -I{} rm -rvf {};\
          aws s3 cp s3://${{ vars.APT_REPO_S3 }}/astemo-tools.tgz .
          tar -xzvf astemo-tools.tgz
          mv ./hitachiastemo-tools ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}/opt/src
          echo "SIZE=$(( $(du -sb ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}} | awk '{print $1}') / 1024 ))" >> $GITHUB_ENV

      - name: Create control file
        shell: bash
        run: |
          mkdir -p ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}/DEBIAN
          echo "Package: ${{ vars.PACKAGE_NAME }}
          Provides: ${{ vars.PACKAGE_NAME }} (= ${{ inputs.Version }})
          Version: ${{ inputs.Version }}
          Maintainer: ${{ github.actor }} <ha@dropmail.cc>
          Depends: ${{ inputs.Depends }}
          Section: utils
          Priority: optional
          Architecture: ${{ inputs.Architecture}}
          Homepage: https://www.hitachiastemo.com
          Installed-Size: ${{ env.SIZE }}
          Description: Customized LLVM" > ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}/DEBIAN/control
          cat ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}/DEBIAN/control

      - name: Build package
        run: |
          dpkg --build ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}

      - name: Install aptly
        run: |
          curl -sL https://www.aptly.info/pubkey.txt | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/aptly.gpg >/dev/null \
          && echo "deb http://repo.aptly.info/ squeeze main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get -q update \
          && sudo apt-get -y install aptly=1.5.0

      - name: Check if repo used
        id: lockRepo
        run: |
          while [ $(aws s3api list-objects-v2 --bucket ${{ vars.APT_REPO_S3 }} --query "contains(Contents[].Key, 'db/aptly-db.lock')") == true ]; do echo "File .lock exists" ; done


      - name: Add package to aptly repo
        if: steps.lockRepo.outcome == 'success'
        id: pushPackage
        run: |
          touch aptly-db.lock
          aws s3 cp aptly-db.lock s3://${{ vars.APT_REPO_S3 }}/db/aptly-db.lock
          if [ $(aws s3api list-objects-v2 --bucket ${{ vars.APT_REPO_S3 }} --query "contains(Contents[].Key, '/db/aptly-db.tar')") ]
          then
            aws s3 cp s3://${{ vars.APT_REPO_S3 }}/db/aptly-db.tar /home/runner/
            tar -xzvf /home/runner/aptly-db.tar --directory /home/runner/
            ls -lsa /home/runner/
            gpg --import --batch /home/runner/public.pgp /home/runner/private.pgp
            APTLY_DIR='/home/runner/.aptly'
            jq --arg aptly_dir "$APTLY_DIR" '.rootDir = $aptly_dir' "/home/runner/.aptly.conf" > tmp.conf && mv tmp.conf "/home/runner/.aptly.conf"
            aptly repo add apt-repo ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}.deb
            aptly publish update --batch=true --gpg-key=${{ secrets.GPG_KEY_ID }} --passphrase=${{ secrets.GPG_KEY_PASS }} stable s3:${{ vars.APT_REPO_S3 }}:tools
            rm home/runner/aptly-db.tar
          else
            aptly list repo
            S3_ENDPOINT='{${{ vars.APT_REPO_S3 }}"{"region": ${{ vars.AWS_REGION }},"bucket": ${{ vars.APT_REPO_S3 }},"acl": "public-read"}}'
            jq --argjson s3_endpoint "$S3_ENDPOINT" '.S3PublishEndpoints = $s3_endpoint' "/home/runner/.aptly.conf" > tmp.conf && mv tmp.conf "/home/runner/.aptly.conf"
            aptly repo create apt-repo
            aptly repo add apt-repo ${{ vars.PACKAGE_NAME }}_${{ inputs.Version }}-${{ inputs.ReleaseNum}}_${{ inputs.Architecture}}.deb
            aptly publish repo --batch=true --gpg-key=${{ secrets.GPG_KEY_ID }} --passphrase=${{ secrets.GPG_KEY_PASS }} --component=main --distribution=stable s3:${{ vars.APT_REPO_S3 }}:tools
          fi 

      - name: Push package db to repo
        run: |
          tar -czvf /home/runner/aptly-db.tar --directory /home/runner/ .aptly/db .aptly.conf public.pgp private.pgp
          aws s3 cp home/runner/aptly-db.tar s3://${{ vars.APT_REPO_S3 }}/db/aptly-db.tar

      - name: Remove .lock
        if: success() || failure()
        run: |
          aws s3 rm s3://${{ vars.APT_REPO_S3 }}/db/aptly-db.lock


